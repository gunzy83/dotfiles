#!/bin/bash -e

display_usage() {
    echo "This script will install cluster config from 1password (set up for pulling ExecCredential from 1password as well)."
    echo -e "\nUsage: $(basename $0) vault_name op_item\n"
    echo -e "Note: Set \$KUBECONFIG to configure alternate file."
}

if [  $# -lt 2 ]; then
    display_usage
    exit 1
fi

if [[ ( $@ == "--help") ||  $@ == "-h" ]]; then
    display_usage
    exit 0
fi

if [ -z "${OP_ACCOUNT}" ]; then
  export OP_ACCOUNT="my.1password.com"
else
  echo "Warning: OP_ACCOUNT set to ${OP_ACCOUNT}"
fi

vault=$1
item=$2

echo "Getting information from item '${item}' in vault '${vault}'..."
context=$(op read "op://${vault}/${item}/context/name")

echo "Setting up cluster for '${item}'..."
kubectl config set-cluster $context \
 --server $(op read "op://${vault}/${item}/cluster/server")
kubectl config set clusters.$context.certificate-authority-data $(op read "op://${vault}/${item}/cluster/certificate-authority-data")
echo "Done!"

echo "Setting up user for '${item}'..."
kubectl config set-credentials $context \
 --exec-api-version=client.authentication.k8s.io/v1beta1 \
 --exec-command=k3s_op2execcredential \
 --exec-env="OP_ACCOUNT=${OP_ACCOUNT}" \
 --exec-env="VAULT=${vault}" \
 --exec-env="ITEM=${item}"
echo "Done!"

echo "Setting up context for '${item}'..."
kubectl config set-context $context \
 --cluster $context \
 --user $context
echo "Done!"
