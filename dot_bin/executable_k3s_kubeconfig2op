#!/bin/bash -e

display_usage() {
  echo "This script will retrieve a kubeconfig from a remote k3s server and formulate a 1password item."
  echo -e "\nUsage: $(basename $0) host vault_name context_name [custom_endpoint]\n"
  echo -e "Examples:\n"
  echo -e "$(basename $0) test1.mgmt.moo.systems Private k3s-test"
  echo -e "$(basename $0) test2.mgmt.moo.systems Private k3s-test k3s-test.gunzy.xyz:443"
}

if [  $# -lt 3 ]; then
  display_usage
  exit 1
fi

if [[ ( $@ == "--help") ||  $@ == "-h" ]]; then
  display_usage
  exit 0
fi

if [ -z "${OP_ACCOUNT}" ]; then
  export OP_ACCOUNT="my.1password.com"
else
  echo "Warning: OP_ACCOUNT set to ${OP_ACCOUNT}"
fi

host=$1
vault=$2
context=$3
endpoint=${4:-HOST}

if [ $endpoint == "HOST" ]; then
  endpoint="${host}:6443"
  echo "Using 'host' as control plane endpoint: https://${endpoint}"
else
  echo "Setting custom control plane endpoint: https://${endpoint}"
fi

echo "Getting kubeconfig from k3s server node '${host}'..."
kubeconfig=$(ssh $host "cat /etc/rancher/k3s/k3s.yaml")
echo "Done!"

echo "Creating item '${context}' in vault '${vault}' in 1password..."
# store values in 1password as base64 encoded strings because it does not preserve newline characters in text fields
# decoding will need to be done in the credential helper process
op item create --category="secure note" --title="$context" --vault="$vault" \
  "context.name[text]=${context}" \
  "cluster.certificate-authority-data[text]=$(echo "$kubeconfig" | yq ".clusters[0].cluster.certificate-authority-data")" \
  "cluster.server[text]=https://${endpoint}" \
  "user.client-certificate-data[text]=$(echo "$kubeconfig" | yq ".users[0].user.client-certificate-data")" \
  "user.client-key-data[text]=$(echo "$kubeconfig" | yq ".users[0].user.client-key-data")"
echo "Done!"
